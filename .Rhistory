library(devtools)
library(roxygen2)
document()
source('~/GitHub/patelm9/chariot/R/query_radlex_terms.R')
query_radlex_terms("mri", "long")
source('~/GitHub/patelm9/chariot/R/query_radlex_terms.R')
query_radlex_terms("mri", "long")
query_radlex_terms(c("mri", "long"))
source('~/GitHub/patelm9/chariot/R/query_radlex_terms.R')
query_radlex_terms(c("mri", "long"))
source('~/GitHub/patelm9/chariot/R/query_radlex_terms.R')
query_radlex_terms(c("mri", "long"))
conn <- mySeagull::connect_to_local_postgres(dbname = "radlex")
resultset <- DBI::dbGetQuery(conn = conn,
statement = sql_statement)
source('~/GitHub/patelm9/chariot/R/query_radlex_terms.R')
query_radlex_terms(c("mri", "long"))
document()
library(roxygen2)
mirCat::doc_push_install_package(commit_message = "+: initial commit")
install.packages("root")
mirCat::doc_push_install_package(commit_message = "+: initial commit")
create("radiogram")
library(devtools)
usethis::edit_r_profile()
usethis::edit_r_profile("project")
library(roxygen2)
document()
mirCat::doc_push_install_package(commit_message = "initial commit")
document()
mirCat::doc_push_install_package(commit_message = "initial commit")
source('~/GitHub/patelm9/radiogram/R/query_radlex_exact_terms.R')
query_radlex_exact_terms(c("parenchymal", "enhancement"))
install.packages("httr")
library(httr)
query_radelement_codes <-
function(path) {
url <- httr::modify_url("https://phpapi.rsna.org/radelement/public/v1/codes",
path = path)
httr::GET(url)
}
query_radelement_codes()
query_radelement_codes <-
function(path = "/radelement/public/v1/codes") {
url <- httr::modify_url("phpapi.rsna.org",
path = path)
httr::GET(url)
}
query_radelement_codes()
query_radelement_codes <-
function(path = "/public/v1/codes") {
url <- httr::modify_url("phpapi.rsna.org/radelement",
path = path)
httr::GET(url)
}
query_radelement_codes()
query_radelement_codes <-
function(path = "/v1/codes") {
url <- httr::modify_url("phpapi.rsna.org/radelement/public",
path = path)
httr::GET(url)
}
query_radelement_codes()
GET("https://phpapi.rsna.org/radelement/public/v1/codes")
query_radelement_codes <-
function() {
httr::GET("https://phpapi.rsna.org/radelement/public/v1/codes")
}
query_radelement_codes()
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/codes")
resp
http_type(resp)
install.packages("jsonlite")
query_radelement_codes <-
function() {
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/codes")
jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
}
query_radelement_codes
library(jsonlite)
query_radelement_codes()
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes()
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes()
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes()
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes()
?structure
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes()
test <- query_radelement_codes()
test_output <- query_radelement_codes()
test_output
purrr::transpose(test_output)
purrr::transpose(test_output$content)
purrr::transpose(test_output$content$data)
purrr::transpose(test_output$content$data) %>% purrr::map(function(x) unlist(x))
library(tidyverse)
purrr::transpose(test_output$content$data) %>% purrr::map(function(x) unlist(x))
purrr::transpose(test_output$content$data) %>% purrr::map(function(x) as_tibble(x))
purrr::transpose(test_output$content$data) %>% purrr::map(function(x) as_tibble(unlist((x)))
)
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/codes")
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
purrr::transpose(parsed) %>%
purrr::map(function(x) unlist((x)))
purrr::transpose(parsed) %>%
purrr::map(function(x) unlist((x))) %>%
as.data.frame()
purrr::transpose(parsed) %>%
purrr::map(function(x) unlist((x))) %>%
unlist() %>%
as.data.frame()
purrr::transpose(parsed) %>%
purrr::map(function(x) unlist((x)))
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(unlist((x))))
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x))
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x)) %>%
dplyr::bind_rows()
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x)) %>%
dplyr::bind_rows() %>%
dplyr::rename_all(stringr::str_remove_all, "^data[.]{1}")
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x)) %>%
dplyr::bind_rows() %>%
dplyr::rename_all(stringr::str_remove_all, "^data[.]{1}") %>%
rubix::cleanup_colnames()
payload <-
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x)) %>%
dplyr::bind_rows() %>%
dplyr::rename_all(stringr::str_remove_all, "^data[.]{1}") %>%
rubix::cleanup_colnames()
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes()
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes("RADLEX")
system <- "RADLEX"
url <- httr::modify_url("https://phpapi.rsna.org/radelement/public/v1/codes/", path = system)
url
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", path = system)
resp <- httr::GET(url)
resp
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes("RADLEX")
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", path = system)
resp <- httr::GET(url)
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed
payload <-
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x)) %>%
dplyr::bind_rows() %>%
dplyr::rename_all(stringr::str_remove_all, "^data[.]{1}") %>%
rubix::cleanup_colnames()
purrr::transpose(parsed) %>%
purrr::map(function(x) as.data.frame(x))
purrr::transpose(parsed)
parsed
?httr::GET
resp <- httr::GET(url,
query = list(page = page))
resp <- httr::GET(url,
query = list(page = 1))
resp
page <- 1
resp <- httr::GET(url,
query = list(page = page))
resp
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed
payload <-
purrr::transpose(parsed$data) %>%
purrr::map(function(x) as.data.frame(x)) %>%
dplyr::bind_rows() %>%
dplyr::rename_all(stringr::str_remove_all, "^data[.]{1}") %>%
rubix::cleanup_colnames()
payload
purrr::transpose(parsed$data)
parsed$data %>%
purrr::map(function(x) as.data.frame(x))
source('~/GitHub/patelm9/radiogram/R/query_radelement_codes.R')
query_radelement_codes("RADLEX")
query_radelement_codes("RADLEX", page = NULL)
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_codes("DICOM")
query_radelement_codes("SNOMEDCT")
query_radelement_codes("LOINC")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("LP28662-2")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("LP28662-2")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("LP28662-2")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("LP28662-2")
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", system, "/", code, "/elements")
code <- "LP28662-2"
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", system, "/", code, "/elements")
resp <- httr::GET(url,
query = list(page = page))
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("LP28662-2")
query_radelement_code("RID28662")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("RID28662")
parsed$data
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("RID28662")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("RID28662")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("RID28662")
query_radelement_code <-
function(code, values = FALSE, elements = TRUE, page = 1) {
if (centipede::nchar_letter(code) == 0) {
system <- "SNOMEDCT"
} else if (grepl("RID", code) == TRUE) {
system <- "RADLEX"
} else {
system <- "LOINC"
}
if (elements == TRUE) {
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", system, "/", code)
resp <- httr::GET(url)
} else if (values == TRUE) {
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", system, "/", code, "/values")
resp <- httr::GET(url,
query = list(page = page))
} else {
url <- paste0("https://phpapi.rsna.org/radelement/public/v1/codes/", system, "/", code)
resp <- httr::GET(url,
query = list(page = page))
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"RSNA API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
payload <-
parsed$data %>%
purrr::map(function(x) t(as.data.frame(x))) %>%
dplyr::bind_rows() %>%
rubix::cleanup_colnames()
structure(
list(
content = payload,
meta = parsed$meta,
links = parsed$links,
response = resp
),
class = "rsna_api"
)
}
query_radelement_code("RID28662")
source('~/GitHub/patelm9/radiogram/R/query_radelement_code.R')
query_radelement_code("RID28662")
parsed$data$system
source('~/GitHub/patelm9/radiogram/R/query_all_radelement_cdes.R')
query_all_radelement_cdes()
parsed
rm(parsed)
source('~/GitHub/patelm9/radiogram/R/query_all_radelement_cdes.R')
query_all_radelement_cdes()
parsed
parsed$data %>%
purrr::map(function(x) t(as.data.frame(x))) %>%
dplyr::bind_rows() %>%
rubix::cleanup_colnames()
parsed$data
purrr::transpose(parsed$data)
str(parsed$data)
source('~/GitHub/patelm9/radiogram/R/query_all_radelement_cdes.R')
source('~/GitHub/patelm9/radiogram/R/query_radelement_cdes.R')
query_radelement_cdes()
query_radelement_cdes("patella")
mirCat::doc_push_install_package(commit_message = "+: rsna radelement api functions\n+: local radlex search exact term function")
mirCat::doc_push_install_package(commit_message = "-: import only jsonlite fromJSON function')
)
""
)
mirCat::doc_push_install_package(commit_message = "-: import only jsonlite fromJSON function")
source('~/GitHub/Public-Packages/radiogram/R/query_all_radelement_cdes.R')
query_all_radelement_cdes("Test")
query_all_radelement_cdes()
library(httr)
query_all_radelement_cdes()
source('~/GitHub/Public-Packages/radiogram/R/search_radelement.R')
?httr::GET
source('~/GitHub/Public-Packages/radiogram/R/search_radelement.R')
search_radelement("test")
source('~/GitHub/Public-Packages/radiogram/R/search_radelement.R')
search_radelement("test")
source('~/GitHub/Public-Packages/radiogram/R/search_radelement.R')
search_radelement("test")
parsed
term <- "computed tomography"
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements",
path = "search",
list(q = term))
resp
search_radelement <-
function(term) {
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements/",
path = "search",
list(q = term))
parsed <<- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"RSNA API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed$data,
meta = parsed$meta,
links = parsed$links,
response = resp
),
class = "rsna_api"
)
}
search_radelement("test")
source('~/GitHub/Public-Packages/radiogram/R/search_radelement.R')
search_radelement("test")
search_radelement <-
function(term) {
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements",
list(search = term))
parsed <<- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"RSNA API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed$data,
meta = parsed$meta,
links = parsed$links,
response = resp
),
class = "rsna_api"
)
}
search_radelement(term)
search_radelement <-
function(term, page) {
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements",
list(search = term,
page = page))
parsed <<- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"RSNA API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed$data,
meta = parsed$meta,
links = parsed$links,
response = resp
),
class = "rsna_api"
)
}
search_radelement("computed tomography", 10)
search_radelement <-
function(term, page) {
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements?search",
list(search = term,
page = page))
parsed <<- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"RSNA API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed$data,
meta = parsed$meta,
links = parsed$links,
response = resp
),
class = "rsna_api"
)
}
search_radelement("computed tomography", 10)
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements?search",
list(search = term,
page = page))
parsed <<- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
resp <- httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements?search",
list(search = term,
page = page))
resp
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
resp
httr::GET("https://phpapi.rsna.org/radelement/public/v1/elements?search",
list(search = term,
page = page))
resp
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
parsed
